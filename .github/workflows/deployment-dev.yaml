name: Polybot Deploy Dev

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string

    secrets:
      EC2_SSH_KEY:
        required: true
      POLYBOT_EC2_IP_DEV:
        required: true
      TELEGRAM_BOT_TOKEN_DEV:
        required: true
      BOT_APP_URL_DEV:
        required: true
      YOLO_SERVER_URL_DEV:
        required: true
      S3_BUCKET_NAME_DEV:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Debug - print ALL inputs and context
        run: |
          echo "üöÄ Image received by deploy: '${{ inputs.image }}'"
          echo "üîç Length of image string: ${#IMAGE_VAR}"
          echo "üîç Is image empty? $([ -z '${{ inputs.image }}' ] && echo 'YES' || echo 'NO')"
          echo "üîç Inputs context:"
          echo "IMAGE_INPUT=${{ inputs.image }}"
          echo "üîç GitHub context:"
          echo "GITHUB_ACTOR=${{ github.actor }}"
          echo "GITHUB_RUN_NUMBER=${{ github.run_number }}"
        env:
          IMAGE_VAR: ${{ inputs.image }}

      - name: Create .env file and deploy
        run: |
          echo "Creating .env file..."
          if [ -z "${{ inputs.image }}" ]; then
            echo "‚ùå ERROR: Image input is empty!"
            exit 1
          fi
          
          echo "IMG_NAME=${{ inputs.image }}" > .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN_DEV }}" >> .env
          echo "BOT_APP_URL=${{ secrets.BOT_APP_URL_DEV }}" >> .env
          echo "YOLO_SERVER_URL=${{ secrets.YOLO_SERVER_URL_DEV }}" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_DEV }}" >> .env
          
          echo "üìù Contents of .env file:"
          cat .env

      - name: SSH and deploy using Docker Compose
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no .env ubuntu@${{ secrets.POLYBOT_EC2_IP_DEV }}:/home/ubuntu/PolybotServicePython/.env

          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.POLYBOT_EC2_IP_DEV }} << 'EOF'
            echo "üìÅ Cloning or updating repo"
            if [ -d "PolybotServicePython" ]; then
              cd PolybotServicePython
              git checkout dev
              git pull origin dev
            else
              git clone --branch dev https://github.com/${{ github.repository }} PolybotServicePython
              cd PolybotServicePython
            fi
          
            echo "üìù Checking .env file contents on server:"
            cat .env
                    
            echo "[+] Checking for Docker"
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker $USER
              newgrp docker
            else
              echo "‚úÖ Docker already installed"
            fi

            echo "üê≥ Running Docker Compose for Dev"
            docker compose -f docker-compose.dev.yaml pull
            docker compose -f docker-compose.dev.yaml up -d --remove-orphans

            echo "üîç Verifying OpenTelemetry metrics endpoint"
            if curl -s http://localhost:8889/metrics | grep -q 'system_cpu_time'; then
              echo "‚úÖ OpenTelemetry metrics are exposed"
            else
              echo "‚ö†Ô∏è Metrics not available"
              docker logs $(docker ps -qf "name=otelcol")
            fi
          EOF