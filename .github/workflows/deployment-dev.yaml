name: Polybot Build Dev

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/polybot-dev:${{ github.run_number }}
          echo "üîß Built image: $IMAGE_NAME"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          
          # Save image name to file for next step
          echo "$IMAGE_NAME" > image_name.txt

      - name: Deploy to Dev
        run: |
          IMAGE_NAME=$(cat image_name.txt)
          echo "üöÄ Deploying image: $IMAGE_NAME"
          
          # Setup SSH key
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem
          
          # Create .env file
          echo "IMG_NAME=$IMAGE_NAME" > .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN_DEV }}" >> .env
          echo "BOT_APP_URL=${{ secrets.BOT_APP_URL_DEV }}" >> .env
          echo "YOLO_SERVER_URL=${{ secrets.YOLO_SERVER_URL_DEV }}" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_DEV }}" >> .env
          
          echo "üìù Contents of .env file:"
          cat .env
          
          # Deploy using SSH
          scp -i key.pem -o StrictHostKeyChecking=no .env ubuntu@${{ secrets.POLYBOT_EC2_IP_DEV }}:/home/ubuntu/PolybotServicePython/.env

          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.POLYBOT_EC2_IP_DEV }} << 'EOF'
            echo "üìÅ Cloning or updating repo"
            if [ -d "PolybotServicePython" ]; then
              cd PolybotServicePython
              git checkout dev
              git pull origin dev
            else
              git clone --branch dev https://github.com/${{ github.repository }} PolybotServicePython
              cd PolybotServicePython
            fi
          
            echo "üìù Checking .env file contents on server:"
            cat .env
                    
            echo "[+] Checking for Docker"
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker $USER
              newgrp docker
            else
              echo "‚úÖ Docker already installed"
            fi

            echo "üê≥ Running Docker Compose for Dev"
            docker compose -f docker-compose.dev.yaml pull
            docker compose -f docker-compose.dev.yaml up -d --remove-orphans

            echo "üîç Verifying OpenTelemetry metrics endpoint"
            if curl -s http://localhost:8889/metrics | grep -q 'system_cpu_time'; then
              echo "‚úÖ OpenTelemetry metrics are exposed"
            else
              echo "‚ö†Ô∏è Metrics not available"
              docker logs $(docker ps -qf "name=otelcol") 2>/dev/null || echo "No otelcol container found"
            fi
          EOF