#name: Polybot Deploy Dev
#
#on:
#  workflow_call:
#    inputs:
#      image:
#        required: true
#        type: string
#    secrets:
#      EC2_SSH_KEY:
#        required: false
#      POLYBOT_EC2_IP_DEV:
#        required: false
#      TELEGRAM_BOT_TOKEN_DEV:
#        required: false
#      BOT_APP_URL_DEV:
#        required: false
#      YOLO_SERVER_URL_DEV:
#        required: false
#      S3_BUCKET_NAME_DEV:
#        required: false
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#    outputs:
#      deploy_image: ${{ steps.show.outputs.image }}
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Setup SSH key
#        run: |
#          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
#          chmod 600 key.pem
#
#      - name: Debug - print and output image
#        id: show
#        run: |
#          echo "üöÄ Image received by deploy: ${{ inputs.image }}"
#          echo "image=${{ inputs.image }}" >> $GITHUB_OUTPUT
#
#      - name: SSH and deploy using Docker Compose
#        run: |
#          echo "IMG_NAME=${{ inputs.image }}" > .env
#          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN_DEV }}" >> .env
#          echo "BOT_APP_URL=${{ secrets.BOT_APP_URL_DEV }}" >> .env
#          echo "YOLO_SERVER_URL=${{ secrets.YOLO_SERVER_URL_DEV }}" >> .env
#          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_DEV }}" >> .env
#
#          scp -i key.pem -o StrictHostKeyChecking=no .env ubuntu@${{ secrets.POLYBOT_EC2_IP_DEV }}:/home/ubuntu/PolybotServicePython/.env
#
#          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.POLYBOT_EC2_IP_DEV }} << 'EOF'
#            echo "üìÅ Cloning or updating repo"
#            if [ -d "PolybotServicePython" ]; then
#              cd PolybotServicePython
#              git checkout dev
#              git pull origin dev
#            else
#              git clone --branch dev https://github.com/${{ github.repository }} PolybotServicePython
#              cd PolybotServicePython
#            fi
#
#            echo "[+] Checking for Docker"
#            if ! command -v docker &> /dev/null; then
#              echo "üì¶ Installing Docker..."
#              curl -fsSL https://get.docker.com -o get-docker.sh
#              sh get-docker.sh
#              sudo usermod -aG docker $USER
#              newgrp docker
#            else
#              echo "‚úÖ Docker already installed"
#            fi
#
#            echo "üê≥ Running Docker Compose for Dev"
#            docker compose -f docker-compose.dev.yaml pull
#            docker compose -f docker-compose.dev.yaml up -d --remove-orphans
#
#            echo "üîç Verifying OpenTelemetry metrics endpoint"
#            if curl -s http://localhost:8889/metrics | grep -q 'system_cpu_time'; then
#              echo "‚úÖ OpenTelemetry metrics are exposed"
#            else
#              echo "‚ö†Ô∏è Metrics not available"
#              docker logs $(docker ps -qf "name=otelcol")
#            fi
#          EOF
name: Polybot Deploy Dev

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - run: |
         echo "üöÄ Received image: ${{ inputs.image }}"
